{"name":"Django-formfield","body":"============\r\nInstallation\r\n============\r\n\r\nInstallation is easy using ``pip`` or ``easy_install``.\r\n\r\n```\r\n    pip install django-formfield\r\n```\r\n\r\nor\r\n\r\n```\r\n    easy_install django-formfield\r\n```\r\n\t\r\nAdd to installed apps\r\n=====================\r\n\r\n```python\r\n    INSTALLED_APPS = (\r\n        ...\r\n        formfield,\r\n        ...\r\n    )\r\n```\r\n\r\n===============\r\nGetting Started\r\n===============\r\n\r\ndjango-formfield is a form field that accepts a django form as its first argument, and validates \r\nas well as render's each form field as expected. Yes a form within a form, *within a dream*? There \r\nare two types of fields available, `FormField` and `ModelFormField`. For \r\n`ModelFormField` the data is stored in json. For `FormField` data is simply \r\nreturned as a python dictionary (form.cleaned_data)\r\n\r\nExample\r\n=======\r\n\r\n```python\r\n    from django.db import models\r\n    from django import forms\r\n    \r\n    from formfield import ModelFormField\r\n\r\n    class PersonMetaForm(forms.Form):\r\n        age = forms.IntegerField()\r\n        sex = forms.ChoiceField(choices=((1, 'male'), (2, 'female')), required=False)\r\n        \r\n\r\n    class Person(models.Model):\r\n        name = CharField(max_length=200)\r\n        \r\n        meta_info = ModelFormField(PersonMetaForm)\r\n```\r\n\r\nWhich will result in something like this (using the admin)\r\n\r\n![ss001](https://github.com/jsoa/django-formfield/raw/master/docs/_images/ss001.png)\r\n\r\nThe `ModelFormField` is automatically set to `null=True`, `blank=True`, this is \r\nbecause validation is done on the inner form. As a result you will see something like the \r\nfollowing if we hit save on the change form:\r\n\r\n![ss002](https://github.com/jsoa/django-formfield/raw/master/docs/_images/ss002.png)\r\n\r\nIf we supply the change for valid data you should get a python dictionary when retrieving \r\nthe data::\r\n\r\n    >>> person = Person.objects.get(pk=1)\r\n    >>> person.meta_info\r\n    {u'age': 12, u'sex': u'1'}\r\n    \r\nThe form is the only thing forcing valid input, behind the scenes the \r\ndata is being serialized into json. Therefore on the python level we can supply meta_info \r\nany valid json:::\r\n\r\n    >>> from sample_app.models import Person\r\n    >>> data = {'some': 'thing', 'is': 'wrong', 'here': 'help!'}\r\n    >>> p = Person.objects.create(name=\"Joan\", meta_info=data)\r\n    >>> p.meta_info\r\n    {'is': 'wrong', 'some': 'thing', 'here': 'help!'}\r\n\r\n\r\n**Note**\r\n\r\n> If the form field is being made available via a change form, such as the admin, any unexpected value will be overridden by what the form returns . For example, the `PersonMetaForm` above only expects `age` and `sex`, so none of the values above ('is', 'some' and 'here') match and will be overridden when the form submitted. \r\n    \r\n> We can however, make the field hidden or readonly and use it to supply any valid json, but its not really the intension of this app.\r\n    \r\nForm within a form within a form within a form within a form.....\r\n=================================================================\r\n\r\nSure its possible..\r\n\r\n![ss003](https://github.com/jsoa/django-formfield/raw/master/docs/_images/ss003.png)\r\n\r\nRead The Docs\r\n=============\r\n\r\nhttp://readthedocs.org/docs/django-formfield/en/latest/","tagline":"django-formfield is a form field that accepts a django form as its first argument","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}